// <auto-generated />
using System;
using FantasyLeague.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasyLeague.Api.Migrations
{
    [DbContext(typeof(FantasyLeagueContext))]
    [Migration("20250911235933_AddNflPlayerProjectionsTable")]
    partial class AddNflPlayerProjectionsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasyLeague.Api.Models.ActiveMlbPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("BirthDate");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.HasIndex("Position");

                    b.HasIndex("Team");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("ActiveMlbPlayers");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ActiveNbaPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("BirthDate");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.HasIndex("Position");

                    b.HasIndex("Team");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("ActiveNbaPlayers");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ActiveNflPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FantasyPosition")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PlayerID")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("FantasyPosition");

                    b.HasIndex("PlayerID")
                        .IsUnique();

                    b.HasIndex("Team");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("ActiveNflPlayers");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("LeagueId", "CreatedAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ChatReadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastReadAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LastReadMessageId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LastReadMessageId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId", "LeagueId")
                        .IsUnique();

                    b.ToTable("ChatReadStatuses");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentTurn")
                        .HasColumnType("integer");

                    b.Property<string>("DraftOrder")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DraftType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Keeper");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<int>("MaxPicksPerSport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<string>("SportType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "DraftType", "SportType");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.DraftPick", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DraftId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsKeeperPick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("PickNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PickedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("PlayerLeague")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerPosition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("RoundPick")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DraftId", "PickNumber")
                        .IsUnique();

                    b.ToTable("DraftPicks");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommissionerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("JoinCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("MaxPlayers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CommissionerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JoinCode")
                        .IsUnique();

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.LeagueConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IncludeMLB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludeNBA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IncludeNFL")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsKeeperLeague")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayersPerTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(25);

                    b.Property<int>("TotalKeeperSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId")
                        .IsUnique();

                    b.ToTable("LeagueConfigurations");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Matchup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("upcoming");

                    b.Property<int>("WeekId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("WeekId", "HomeTeamId", "AwayTeamId")
                        .IsUnique();

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.NflPlayerProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("FantasyPointsYahooSeasonLong")
                        .HasColumnType("double precision");

                    b.Property<double>("FieldGoalsMade")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastSyncedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("PassingTouchdowns")
                        .HasColumnType("double precision");

                    b.Property<double>("PassingYards")
                        .HasColumnType("double precision");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double>("ReceivingTouchdowns")
                        .HasColumnType("double precision");

                    b.Property<double>("ReceivingYards")
                        .HasColumnType("double precision");

                    b.Property<double>("RushingTouchdowns")
                        .HasColumnType("double precision");

                    b.Property<double>("RushingYards")
                        .HasColumnType("double precision");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Position");

                    b.HasIndex("Team");

                    b.HasIndex("Season", "Year");

                    b.HasIndex("Name", "Season", "Year");

                    b.HasIndex("PlayerId", "Season", "Year")
                        .IsUnique();

                    b.ToTable("NflPlayerProjections");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AssistsPerGame")
                        .HasColumnType("double precision");

                    b.Property<double?>("BattingAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("BlocksPerGame")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double?>("EarnedRunAverage")
                        .HasColumnType("double precision");

                    b.Property<double?>("FieldGoalPercentage")
                        .HasColumnType("double precision");

                    b.Property<double?>("FreeThrowPercentage")
                        .HasColumnType("double precision");

                    b.Property<int?>("GamesPlayed")
                        .HasColumnType("integer");

                    b.Property<int?>("Hits")
                        .HasColumnType("integer");

                    b.Property<int?>("HomeRuns")
                        .HasColumnType("integer");

                    b.Property<int?>("Interceptions")
                        .HasColumnType("integer");

                    b.Property<string>("League")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("Losses")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PassingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int?>("PassingYards")
                        .HasColumnType("integer");

                    b.Property<double?>("PointsPerGame")
                        .HasColumnType("double precision");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<double?>("ReboundsPerGame")
                        .HasColumnType("double precision");

                    b.Property<int?>("ReceivingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceivingYards")
                        .HasColumnType("integer");

                    b.Property<int?>("Receptions")
                        .HasColumnType("integer");

                    b.Property<int?>("Runs")
                        .HasColumnType("integer");

                    b.Property<int?>("RunsBattedIn")
                        .HasColumnType("integer");

                    b.Property<int?>("RushingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int?>("RushingYards")
                        .HasColumnType("integer");

                    b.Property<int?>("Saves")
                        .HasColumnType("integer");

                    b.Property<double?>("StealsPerGame")
                        .HasColumnType("double precision");

                    b.Property<int?>("StolenBases")
                        .HasColumnType("integer");

                    b.Property<int?>("Strikeouts")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double?>("ThreePointPercentage")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double?>("WHIP")
                        .HasColumnType("double precision");

                    b.Property<int?>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("League");

                    b.HasIndex("Name", "League");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.PlayerWeeklyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedKicks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DataSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DefensiveTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraPointsAttempted")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraPointsMade")
                        .HasColumnType("integer");

                    b.Property<decimal>("FantasyPoints")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("FantasyPointsHalfPPR")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("FantasyPointsPPR")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("FantasyPointsStandard")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("FieldGoalsAttempted0to39")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsAttempted40to49")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsAttempted50Plus")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsMade0to39")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsMade40to49")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsMade50Plus")
                        .HasColumnType("integer");

                    b.Property<int>("FumbleRecoveries")
                        .HasColumnType("integer");

                    b.Property<int>("FumblesLost")
                        .HasColumnType("integer");

                    b.Property<int>("FumblesTotal")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("GameDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GameStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Scheduled");

                    b.Property<int>("InterceptionsDefense")
                        .HasColumnType("integer");

                    b.Property<bool>("IsHomeGame")
                        .HasColumnType("boolean");

                    b.Property<string>("League")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Opponent")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("PassingAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("PassingCompletions")
                        .HasColumnType("integer");

                    b.Property<int>("PassingInterceptions")
                        .HasColumnType("integer");

                    b.Property<int>("PassingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("PassingTwoPointConversions")
                        .HasColumnType("integer");

                    b.Property<int>("PassingYards")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PointsAllowed")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ReceivingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingTwoPointConversions")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingYards")
                        .HasColumnType("integer");

                    b.Property<int>("Receptions")
                        .HasColumnType("integer");

                    b.Property<int>("RushingAttempts")
                        .HasColumnType("integer");

                    b.Property<int>("RushingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("RushingTwoPointConversions")
                        .HasColumnType("integer");

                    b.Property<int>("RushingYards")
                        .HasColumnType("integer");

                    b.Property<int>("Sacks")
                        .HasColumnType("integer");

                    b.Property<int>("Safeties")
                        .HasColumnType("integer");

                    b.Property<int>("Season")
                        .HasColumnType("integer");

                    b.Property<int>("Targets")
                        .HasColumnType("integer");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.Property<int>("YardsAllowed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Position");

                    b.HasIndex("Team");

                    b.HasIndex("League", "Season", "Week");

                    b.HasIndex("PlayerId", "Season", "Week")
                        .IsUnique();

                    b.HasIndex("PlayerName", "Season", "Week");

                    b.ToTable("PlayerWeeklyStats");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ScoringSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BenchPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("BlockedKickPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal>("DefensePointsAllowed0Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed14to20Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed1to6Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed21to27Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed28to34Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed35PlusPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefensePointsAllowed7to13Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("DefenseTouchdownPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ExtraPointPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FieldGoal0to39Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FieldGoal40to49Points")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FieldGoal50PlusPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FumbleLostPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("FumbleRecoveryPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("InterceptionPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MissedExtraPointPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MissedFieldGoalPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PassingInterceptionPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PassingTouchdownPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PassingTwoPointConversion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PassingYardsPerPoint")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ReceivingTouchdownPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ReceivingTwoPointConversion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ReceivingYardsPerPoint")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("ReceptionPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("RushingTouchdownPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("RushingTwoPointConversion")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("RushingYardsPerPoint")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("SackPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("SafetyPoints")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "Sport")
                        .IsUnique()
                        .HasFilter("\"IsActive\" = true");

                    b.ToTable("ScoringSettings");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Sport")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId", "Sport", "Year")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TeamStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<decimal>("PointsAgainst")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PointsFor")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Ties")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId", "LeagueId")
                        .IsUnique();

                    b.ToTable("TeamStats");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradeNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TradeProposalId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TradeProposalId");

                    b.HasIndex("UserId", "CreatedAt");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("TradeNotifications");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("PickNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerLeague")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerPosition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("TradeProposalId")
                        .HasColumnType("integer");

                    b.Property<int?>("TradeProposalId1")
                        .HasColumnType("integer");

                    b.Property<int?>("TradeProposalId2")
                        .HasColumnType("integer");

                    b.Property<string>("TradeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserRosterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TradeProposalId1");

                    b.HasIndex("TradeProposalId2");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRosterId");

                    b.HasIndex("TradeProposalId", "TradeType");

                    b.ToTable("TradePlayers");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradeProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("ProposingUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("LeagueId", "Status");

                    b.HasIndex("ProposingUserId", "Status");

                    b.HasIndex("TargetUserId", "Status");

                    b.ToTable("TradeProposals");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerLeague")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerPosition")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerTeam")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RelatedTransactionId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTransactionId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("LeagueId", "CreatedAt");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TeamLogo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LeagueId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.UserRoster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DraftId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DraftedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("LineupPosition")
                        .HasColumnType("text");

                    b.Property<int>("PickNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerLeague")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlayerPosition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PlayerTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DraftId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId", "DraftId", "PlayerName")
                        .IsUnique();

                    b.ToTable("UserRosters");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Week", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId", "WeekNumber")
                        .IsUnique();

                    b.ToTable("Weeks");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ChatMessage", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ChatReadStatus", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.ChatMessage", "LastReadMessage")
                        .WithMany()
                        .HasForeignKey("LastReadMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastReadMessage");

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Draft", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.DraftPick", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.Draft", "Draft")
                        .WithMany("DraftPicks")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Draft");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.League", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.User", "Commissioner")
                        .WithMany()
                        .HasForeignKey("CommissionerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FantasyLeague.Api.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commissioner");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.LeagueConfiguration", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithOne("Configuration")
                        .HasForeignKey("FantasyLeague.Api.Models.LeagueConfiguration", "LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Matchup", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.User", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.Week", "Week")
                        .WithMany("Matchups")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.ScoringSettings", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany("ScoringSettings")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Season", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TeamStats", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany("TeamStats")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithOne("TeamStats")
                        .HasForeignKey("FantasyLeague.Api.Models.TeamStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradeNotification", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.TradeProposal", "TradeProposal")
                        .WithMany("Notifications")
                        .HasForeignKey("TradeProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeProposal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradePlayer", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.TradeProposal", "TradeProposal")
                        .WithMany()
                        .HasForeignKey("TradeProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.TradeProposal", null)
                        .WithMany("ProposingPlayers")
                        .HasForeignKey("TradeProposalId1");

                    b.HasOne("FantasyLeague.Api.Models.TradeProposal", null)
                        .WithMany("TargetPlayers")
                        .HasForeignKey("TradeProposalId2");

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.UserRoster", "UserRoster")
                        .WithMany()
                        .HasForeignKey("UserRosterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TradeProposal");

                    b.Navigation("User");

                    b.Navigation("UserRoster");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradeProposal", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "ProposingUser")
                        .WithMany()
                        .HasForeignKey("ProposingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("ProposingUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Transaction", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.Transaction", "RelatedTransaction")
                        .WithMany()
                        .HasForeignKey("RelatedTransactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("RelatedTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.User", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany("Users")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.UserRoster", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.Draft", "Draft")
                        .WithMany()
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyLeague.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draft");

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Week", b =>
                {
                    b.HasOne("FantasyLeague.Api.Models.Season", "Season")
                        .WithMany("Weeks")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Draft", b =>
                {
                    b.Navigation("DraftPicks");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.League", b =>
                {
                    b.Navigation("Configuration");

                    b.Navigation("ScoringSettings");

                    b.Navigation("TeamStats");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Season", b =>
                {
                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.TradeProposal", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("ProposingPlayers");

                    b.Navigation("TargetPlayers");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.User", b =>
                {
                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("FantasyLeague.Api.Models.Week", b =>
                {
                    b.Navigation("Matchups");
                });
#pragma warning restore 612, 618
        }
    }
}
